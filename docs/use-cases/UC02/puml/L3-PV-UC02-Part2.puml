@startuml L3-PV-UC02

title Level 3 - Create Test Plan (MelmacBE)

hide empty members

skinparam class {
    BackgroundColor<<valueObject>> #D6EAF8
    BackgroundColor<<root>> #FDEBD0
    BackgroundColor<<service>> #D1F2EB
    BackgroundColor #FEF9E7
    ArrowColor Black
}

skinparam package {
    BackgroundColor #EBF5FB
}

actor Developer as D

box "<<Container (C4)>> MelmacBE"
    participant "<<Controller>>\nTestPlanController" as Controller
    participant "<<Service>>\nTestPlanService" as Service
    participant "<<Repository>>\nExecutionTypeRepository" as ExecutionTypeRepo
    participant "<<Domain>>\nTestPlanVersion" as TestPlanVersion
    participant "<<Repository>>\nTestPlanVersionRepository" as PlanVersionRepo
    participant "<<Repository>>\nThresholdTypeRepository" as ThresholdTypeRepo
    participant "<<Mapper>>\nTestThresholdMapper" as ThresholdMapper
    participant "<<Domain>>\nTestThreshold" as TestThreshold
    participant "<<Repository>>\nTestThresholdRepository" as ThresholdRepo
    participant "<<Repository>>\nMetricParameterRepository" as MetricParameterRepo
    participant "<<Mapper>>\nTestMetricParameterMapper" as MetricParameterMapper
    participant "<<Domain>>\nTestMetricParameter" as TestMetricParameter
    participant "<<Repository>>\nTestMetricParameterRepository" as TestMetricParameterRepo
    participant "<<Mapper>>\nTestExecutionTypeMapper" as ExecutionTypeMapper
    participant "<<Domain>>\nTestExecutionType" as TestExecutionType
    participant "<<Repository>>\nTestExecutionTypeRepository" as TestExecutionTypeRepo
    participant "<<Domain>>\nTestSuiteVersionPlan" as TestSuiteVersionPlan
    participant "<<Repository>>\nTestSuiteVersionPlanRepository" as TestSuiteVersionPlanRepo
    participant "<<Mapper>>\nTestPlanVersionMapper" as TestPlanVersionMapper
    participant "<<DTO>>\nTestPlanVersionDTO" as TestPlanVersion
end box
participant "<<External>>\nDatabase" as DB

activate D
activate Controller
activate Service
ref over Service 
    "See Test Plan Creation Part 1" at [./UC02/L3-PV-UC02-Part1.puml]
end ref
Service -> ExecutionTypeRepo: findByName(ExecutionTypeName)
activate ExecutionTypeRepo
ExecutionTypeRepo -> DB: Query to find ExecutionType by name
activate DB
DB --> DB: Finds ExecutionType
DB --> ExecutionTypeRepo: returns ExecutionType
deactivate DB
ExecutionTypeRepo --> Service: returns ExecutionType
deactivate ExecutionTypeRepo
Service -> TestPlanVersion: create(TestPlanVersionParams)
activate TestPlanVersion
TestPlanVersion --> TestPlanVersion: Validates and initializes TestPlanVersion
TestPlanVersion --> Service: returns TestPlanVersion
deactivate TestPlanVersion
Service -> PlanVersionRepo: save(TestPlanVersion)
activate PlanVersionRepo
PlanVersionRepo -> DB: Query to save TestPlanVersion
activate DB
DB --> DB: Saves TestPlanVersion
DB --> PlanVersionRepo: returns saved TestPlanVersion
deactivate DB
PlanVersionRepo --> Service: returns TestPlanVersion
deactivate PlanVersionRepo
Service -> ThresholdTypeRepo: findByName(ThresholdTypeName)
activate ThresholdTypeRepo
ThresholdTypeRepo -> DB: Query to find ThresholdType by name
activate DB
DB --> DB: Finds ThresholdType
DB --> ThresholdTypeRepo: returns ThresholdType
deactivate DB
ThresholdTypeRepo --> Service: returns ThresholdType
deactivate ThresholdTypeRepo
Service -> ThresholdMapper: fromRequestDTO(Threshold, TestPlanVersionId, ThresholdTypeId)
activate ThresholdMapper
ThresholdMapper -> TestThreshold: create(TestThreshold)
activate TestThreshold
TestThreshold --> TestThreshold: Validates and initializes TestThreshold
TestThreshold --> ThresholdMapper: returns TestThreshold
deactivate TestThreshold
ThresholdMapper --> Service: returns TestThreshold
deactivate ThresholdMapper
Service -> ThresholdRepo: save(TestThreshold)
activate ThresholdRepo
ThresholdRepo -> DB: Query to save TestThreshold
activate DB
DB --> DB: Saves TestThreshold
DB --> ThresholdRepo: returns saved TestThreshold
deactivate DB
ThresholdRepo --> Service: returns TestThreshold
deactivate ThresholdRepo
Service -> MetricParameterRepo: findByMetricIdAndName(MetricId, MetricParameterName)
activate MetricParameterRepo
MetricParameterRepo -> DB: Query to find MetricParameter by MetricId and name
activate DB
DB --> DB: Finds MetricParameter
DB --> MetricParameterRepo: returns MetricParameter
deactivate DB
MetricParameterRepo --> Service: returns MetricParameter
deactivate MetricParameterRepo
Service -> MetricParameterMapper: fromRequestDTO(TestMetricParameter, TestPlanVersionId, MetricParameterId)
activate MetricParameterMapper
MetricParameterMapper -> TestMetricParameter: create(TestMetricParameter)
activate TestMetricParameter
TestMetricParameter --> TestMetricParameter: Validates and initializes TestMetricParameter
TestMetricParameter --> MetricParameterMapper: returns TestMetricParameter
deactivate TestMetricParameter
MetricParameterMapper --> Service: returns TestMetricParameter
deactivate MetricParameterMapper
Service -> TestMetricParameterRepo: save(TestMetricParameter)
activate TestMetricParameterRepo
TestMetricParameterRepo -> DB: Query to save TestMetricParameter
activate DB
DB --> DB: Saves TestMetricParameter
DB --> TestMetricParameterRepo: returns saved TestMetricParameter
deactivate DB
TestMetricParameterRepo --> Service: returns TestMetricParameter
deactivate TestMetricParameterRepo
Service -> ExecutionTypeRepo: findByExecutionTypeIdAndName(ExecutionTypeId, ExecutionTypeName)
activate ExecutionTypeRepo
ExecutionTypeRepo -> DB: Query to find ExecutionType by ExecutionTypeId and name
activate DB
DB --> DB: Finds ExecutionType
DB --> ExecutionTypeRepo: returns ExecutionType
deactivate DB
ExecutionTypeRepo --> Service: returns ExecutionType
deactivate ExecutionTypeRepo
Service -> ExecutionTypeMapper: fromRequestDTO(TestExecutionType, TestPlanVersionId, ExecutionTypeId)
activate ExecutionTypeMapper
ExecutionTypeMapper -> TestExecutionType: create(TestExecutionType)
activate TestExecutionType
TestExecutionType --> TestExecutionType: Validates and initializes TestExecutionType
TestExecutionType --> ExecutionTypeMapper: returns TestExecutionType
deactivate TestExecutionType
ExecutionTypeMapper --> Service: returns TestExecutionType
deactivate ExecutionTypeMapper
Service -> TestExecutionTypeRepo: save(TestExecutionType)
activate TestExecutionTypeRepo
TestExecutionTypeRepo -> DB: Query to save TestExecutionType
activate DB
DB --> DB: Saves TestExecutionType
DB --> TestExecutionTypeRepo: returns saved TestExecutionType
deactivate DB
TestExecutionTypeRepo --> Service: returns TestExecutionType
deactivate TestExecutionTypeRepo
Service -> TestSuiteVersionPlan: create(TestSuiteVersionPlanParams)
activate TestSuiteVersionPlan
TestSuiteVersionPlan --> TestSuiteVersionPlan: Validates and initializes TestSuiteVersionPlan
TestSuiteVersionPlan --> Service: returns TestSuiteVersionPlan
deactivate TestSuiteVersionPlan
Service -> TestSuiteVersionPlanRepo: save(TestSuiteVersionPlan)
activate TestSuiteVersionPlanRepo
TestSuiteVersionPlanRepo -> DB: Query to save TestSuiteVersionPlan
activate DB
DB --> DB: Saves TestSuiteVersionPlan
DB --> TestSuiteVersionPlanRepo: returns saved TestSuiteVersionPlan
deactivate DB
TestSuiteVersionPlanRepo --> Service: returns TestSuiteVersionPlan
deactivate TestSuiteVersionPlanRepo
Service -> TestPlanVersionMapper: toDTO(TestPlanVersion)
activate TestPlanVersionMapper
TestPlanVersionMapper -> TestPlanVersion: create(TestPlanVersion)
activate TestPlanVersion
TestPlanVersion --> TestPlanVersion: Validates and initializes TestPlanVersion
TestPlanVersion --> TestPlanVersionMapper: returns TestPlanVersion
deactivate TestPlanVersion
TestPlanVersionMapper --> Service: returns TestPlanVersion
deactivate TestPlanVersionMapper
Service -> Controller: returns TestPlanVersionResponseDTO
deactivate Service
Controller --> D: Confirms Test Plan creation
deactivate Controller
deactivate D

@enduml