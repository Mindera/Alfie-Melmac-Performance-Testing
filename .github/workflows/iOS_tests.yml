name: Alfie iOS Test Automation

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  ios-tests:
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: List Xcode versions
        run: ls -l /Applications | grep Xcode

      - name: Show selected Xcode version
        run: xcodebuild -version

      - name: Show available iOS simulators
        run: xcrun simctl list devices

      - name: Download iOS app artifacts
        run: |
          mkdir -p Melmac/src/main/resources/apps
          curl -L "https://github.com/Mindera/Alfie-UITests/releases/download/asdsad/Alfie.zip" -o Melmac/src/main/resources/apps/Alfie.zip
          cd Melmac/src/main/resources/apps
          unzip -o Alfie.zip
          rm Alfie.zip
          ls -l

      - name: Generate Gradle wrapper
        working-directory: Melmac
        run: gradle wrapper --gradle-version 8.13

      - name: Make Gradle wrapper executable
        working-directory: Melmac
        run: chmod +x gradlew

      - name: Build backend
        working-directory: Melmac
        run: ./gradlew build

      - name: Start backend
        working-directory: Melmac
        run: ./gradlew run > $GITHUB_WORKSPACE/backend.log 2>&1 &

      - name: Tail backend log
        run: tail -f $GITHUB_WORKSPACE/backend.log &

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/; then
              echo "Backend is up!"
              exit 0
            fi
            sleep 2
          done
          echo "Backend did not start in time" >&2
          exit 1

      - name: Create test suite
        working-directory: Melmac
        run: |
          mkdir -p results
          curl -s -X POST http://localhost:8080/test-suites \
            -H "Content-Type: application/json" \
            -d '{
              "testSuiteName": "My Test Suite",
              "testSuiteDescription": "Description of my test suite"
            }' | tee results/test_suite.json

          TEST_SUITE_ID=$(jq '.testSuiteId' results/test_suite.json)
          echo "🧪 Extracted TEST_SUITE_ID: $TEST_SUITE_ID"
          echo "TEST_SUITE_ID=$TEST_SUITE_ID" >> $GITHUB_ENV

      - name: Create iOS test plan
        working-directory: Melmac
        run: |
          curl -s -X POST http://localhost:8080/test-plans \
            -H "Content-Type: application/json" \
            -d "{
              \"notes\": \"Test plan for App Startup Time metric\",
              \"testName\": \"Startup Time Plan\",
              \"metricMetricId\": 1,
              \"deviceName\": \"iPhone 16 Pro\",
              \"appName\": \"Alfie.app\",
              \"appVersion\": \"0.8.1\",
              \"appPackage\": \"com.mindera.alfie.debug\",
              \"executionTypeExecutionTypeId\": 1,
              \"thresholds\": [
                {
                  \"targetValue\": 10000,
                  \"thresholdTypeThresholdTypeId\": 2,
                  \"metricOutputMetricOutputId\": 1
                }
              ],
              \"metricParameters\": [
                {
                  \"parameterValue\": \"account-btn\",
                  \"metricParameterMetricParameterId\": 1
                },
                {
                  \"parameterValue\": \"50000\",
                  \"metricParameterMetricParameterId\": 2
                }
              ],
              \"executionTypeParameters\": [],
              \"testSuiteVersionId\": ${TEST_SUITE_ID}
            }"

      - name: Run iOS test suite
        working-directory: Melmac
        run: |
          mkdir -p results

          echo "🚀 Running test suite with ID: $TEST_SUITE_ID"
          echo "📡 Sending POST request to: http://localhost:8080/test-suites/$TEST_SUITE_ID/run"
          
          : > results/suite_execution.json

          http_code=$(curl -s -w "%{http_code}" -o results/suite_execution.json -X POST "http://localhost:8080/test-suites/$TEST_SUITE_ID/run")
          echo "🔁 HTTP status code: $http_code"
          echo "HTTP_CODE=$http_code" >> $GITHUB_ENV
          
          echo "📄 Raw response body:"
          cat results/suite_execution.json || echo "❌ suite_execution.json not found or empty"

          if [ "$http_code" -ne 200 ]; then
            echo "❌ Failed to run test suite. HTTP $http_code"
            # Não termina o job para que o resumo corra
          else
            echo "✅ Suite execution request succeeded"
          fi


      - name: Generate summary
        if: always()
        run: |
          mkdir -p results
          http_status=$HTTP_CODE
          if test -f results/suite_execution.json && [ "$http_status" = "200" ]; then
            suiteExecutionId=$(jq '.suiteExecutionId' results/suite_execution.json)
            testSuiteVersionId=$(jq '.testSuiteVersionTestSuiteVersionId' results/suite_execution.json)

            echo "## Performance Test Suite Results (iOS)" > results/summary.md
            echo "" >> results/summary.md
            echo "**Suite Execution ID:** $suiteExecutionId  " >> results/summary.md
            echo "**Test Suite Version ID:** $testSuiteVersionId" >> results/summary.md
            echo "" >> results/summary.md

            echo "### Test Execution Results" >> results/summary.md
            echo "| Test Execution ID | Passed | Start Time | End Time | Test Plan Version ID |" >> results/summary.md
            echo "|-------------------|--------|------------|----------|----------------------|" >> results/summary.md
            jq -r '.executionResults[] | "| \(.testExecutionId) | \(.passed) | \(.initialTimestamp) | \(.endTimestamp) | \(.testPlanVersionTestPlanVersionId) |"' results/suite_execution.json >> results/summary.md

            jq -c '.executionResults[]' results/suite_execution.json | while read -r exec; do
              testExecutionId=$(echo "$exec" | jq '.testExecutionId')
              testPlanVersionId=$(echo "$exec" | jq '.testPlanVersionTestPlanVersionId')

              echo "#### Thresholds for Test Execution ID $testExecutionId" >> results/summary.md
              echo "| Target Value | Threshold Type | Metric Output ID |" >> results/summary.md
              echo "|--------------|----------------|------------------|" >> results/summary.md
              curl -s "http://localhost:8080/thresholds?testPlanVersionId=$testPlanVersionId" | jq -r '.[] | "| \(.targetValue) | \(.thresholdTypeThresholdTypeId) | \(.metricOutputMetricOutputId) |"' >> results/summary.md
              echo "" >> results/summary.md

              echo "#### Metric Output Results for Test Execution ID $testExecutionId" >> results/summary.md
              echo "| Metric Output Name | Value |" >> results/summary.md
              echo "|--------------------|-------|" >> results/summary.md
              curl -s "http://localhost:8080/test-executions/outputs?testExecutionId=$testExecutionId" | jq -r '.[] | "| \(.metricOutputName // "N/A") | \(.value // "N/A") |"' >> results/summary.md
              echo "" >> results/summary.md
            done

            echo "✅ Summary generated"
          else
            echo "## Performance Test Suite Results (iOS)" > results/summary.md
            echo "" >> results/summary.md
            echo "❌ Test suite execution failed." >> results/summary.md
            echo "" >> results/summary.md
            echo "**HTTP Status:** $http_status" >> results/summary.md
            echo "" >> results/summary.md
            if test -f results/suite_execution.json; then
              echo '```json' >> results/summary.md
              cat results/suite_execution.json >> results/summary.md
              echo '```' >> results/summary.md
            else
              echo "No suite_execution.json found." >> results/summary.md
            fi
          fi

      - name: Upload summary and backend log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Test-Results
          path: |
            results/summary.md
            backend.log
