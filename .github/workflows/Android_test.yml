name: Alfie Android Test Automation

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  android-tests:
    runs-on: ubuntu-latest
    env:
      APP_URL: "https://github.com/Mindera/Alfie-UITests/releases/download/asdsad/Alfie.apk"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install system image for AVD (x86_64)
        run: sdkmanager "system-images;android-30;google_apis;x86_64"

      - name: Create Android AVD
        run: echo "no" | avdmanager create avd -n Medium_Phone_API_30 -k "system-images;android-30;google_apis;x86_64" --device "pixel"

      - name: Start AVD
        run: |
          nohup emulator -avd Medium_Phone_API_30 -no-audio -no-window -no-boot-anim -gpu swiftshader_indirect > emulator.log 2>&1 &
          adb wait-for-device
          bootCompleted=""
          max_wait=300
          waited=0
          until [[ "$bootCompleted" == "1" || $waited -ge $max_wait ]]; do
            bootCompleted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            echo "⏳ Still booting... waited ${waited}s"
            sleep 5
            waited=$((waited + 5))
          done
          if [[ "$bootCompleted" != "1" ]]; then
            echo "❌ Emulator did not boot in time"
            exit 1
          fi
          echo "✅ Emulator booted"

      - name: Generate Gradle Wrapper
        working-directory: Melmac
        run: gradle wrapper --gradle-version 8.13

      - name: Make Gradle Wrapper executable
        working-directory: Melmac
        run: chmod +x gradlew

      - name: Build backend
        working-directory: Melmac
        run: ./gradlew build

      - name: Prepare apps folder and download APK
        working-directory: Melmac
        run: |
          mkdir -p src/main/resources/apps
          echo "Downloading APK from $APP_URL"
          curl -L "$APP_URL" -o src/main/resources/apps/Alfie.apk
          ls -l src/main/resources/apps

      - name: Start backend
        working-directory: Melmac
        run: ./gradlew run > $GITHUB_WORKSPACE/backend.log 2>&1 &

      - name: Tail backend log
        run: tail -f $GITHUB_WORKSPACE/backend.log &

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/; then
              echo "Backend is up!"
              exit 0
            fi
            sleep 2
          done
          echo "Backend did not start in time" >&2
          exit 1

      - name: Create test suite and Android test plan
        working-directory: Melmac
        run: |
          mkdir -p results
          curl -s -X POST http://localhost:8080/test-suites \
            -H "Content-Type: application/json" \
            -d '{"testSuiteName": "Android Test Suite", "testSuiteDescription": "Android tests"}' | tee results/test_suite.json

          export TEST_SUITE_ID=$(jq '.testSuiteId' results/test_suite.json)
          echo "TEST_SUITE_ID=$TEST_SUITE_ID" >> $GITHUB_ENV

          curl -s -X POST http://localhost:8080/test-plans \
            -H "Content-Type: application/json" \
            -d "{
              \"notes\": \"Startup Time Android\",
              \"testName\": \"Android Startup Time Plan\",
              \"metricMetricId\": 1,
              \"deviceName\": \"Medium_Phone_API_30\",
              \"appName\": \"Alfie.apk\",
              \"appVersion\": \"0.8.0\",
              \"appPackage\": \"au.com.alfie.ecomm.debug\",
              \"mainActivity\": \"au.com.alfie.ecomm.MainActivity\",
              \"executionTypeExecutionTypeId\": 1,
              \"thresholds\": [
                {
                  \"targetValue\": 100,
                  \"thresholdTypeThresholdTypeId\": 2,
                  \"metricOutputMetricOutputId\": 1
                }
              ],
              \"metricParameters\": [
                {
                  \"parameterValue\": \"home-tab\",
                  \"metricParameterMetricParameterId\": 1
                }
              ],
              \"executionTypeParameters\": [],
              \"testSuiteVersionId\": ${TEST_SUITE_ID}
            }"

      - name: Run Android test suite
        working-directory: Melmac
        run: curl -X POST "http://localhost:8080/test-suites/${TEST_SUITE_ID}/run" > results/suite_execution.json

      - name: Upload backend log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-log
          path: backend.log

      - name: Add results to GitHub Actions summary
        if: always()
        run: |
          if [ -f results/suite_execution.json ]; then
            echo "## Android Test Results" >> $GITHUB_STEP_SUMMARY
            jq . results/suite_execution.json >> $GITHUB_STEP_SUMMARY
          else
            echo "No execution result found." >> $GITHUB_STEP_SUMMARY
          fi
